import asyncio
import random
import string
import aiohttp
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiohttp import web

API_TOKEN = os.getenv('API_TOKEN')
CRYPTOBOT_TOKEN = os.getenv('CRYPTOBOT_TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
ADMIN_ID = 5001689214

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class BuyState(StatesGroup):
    choosing_amount = State()

PRICES = {
    "bomj": {"usdt": 0.5, "ton": 0.00977258},
    "random": {"usdt": 1.0, "ton": 0.32017184},
    "fat": {"usdt": 2.5, "ton": 0.79812681}
}

stock = {
    "bomj": 0,
    "random": 0,
    "fat": 0
}

item_names = {
    "bomj": "–ë–æ–º–∂ –∫—É–∫–∏",
    "random": "–†–∞–Ω–¥–æ–º –∫—É–∫–∏",
    "fat": "–ñ–∏—Ä –∫—É–∫–∏"
}

user_data = {}

async def update_stock():
    while True:
        stock["bomj"] = random.randint(500, 1000)
        stock["random"] = random.randint(600, 1200)
        stock["fat"] = random.randint(100, 200)
        await asyncio.sleep(86400)

def generate_cookie():
    prefix = "_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|"
    data = ''.join(random.choices(string.ascii_letters + string.digits, k=700))
    return prefix + data

def product_keyboard():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ë–æ–º–∂ –∫—É–∫–∏ ({stock['bomj']} —à—Ç)", callback_data="buy_bomj")],
        [InlineKeyboardButton(text=f"–†–∞–Ω–¥–æ–º –∫—É–∫–∏ ({stock['random']} —à—Ç)", callback_data="buy_random")],
        [InlineKeyboardButton(text=f"–ñ–∏—Ä –∫—É–∫–∏ ({stock['fat']} —à—Ç)", callback_data="buy_fat")]
    ])
    return kb

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ChiterShop</b>!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=product_keyboard())

@router.callback_query(lambda c: c.data and c.data.startswith("buy_"))
async def ask_amount(callback: types.CallbackQuery, state: FSMContext):
    item = callback.data.split('_')[1]
    if stock[item] <= 0:
        await callback.message.answer(f"–¢–æ–≤–∞—Ä–∞ <b>{item_names[item]}</b> –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!")
        return
    await state.update_data(item=item)
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item_names[item]}</b>.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:")
    await state.set_state(BuyState.choosing_amount)

@router.message(BuyState.choosing_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError
        data = await state.get_data()
        item = data['item']
        if amount > stock[item]:
            await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞ <b>{item_names[item]}</b> –≤ –Ω–∞–ª–∏—á–∏–∏! –û—Å—Ç–∞—Ç–æ–∫: {stock[item]} —à—Ç.")
            return
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.")
        return

    total_ton = round(PRICES[item]['ton'] * amount, 6)
    payload = f"{message.from_user.id}_{item}_{amount}"

    user_data[payload] = {
        "item": item,
        "amount": amount,
        "user_id": message.from_user.id
    }

    async with aiohttp.ClientSession() as session:
        headers = {
            "Content-Type": "application/json",
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
        }
        invoice_data = {
            "asset": "TON",
            "amount": total_ton,
            "description": f"–ü–æ–∫—É–ø–∫–∞: {item_names[item]} x{amount}",
            "hidden_message": "–ö—É–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.",
            "payload": payload,
            "paid_btn_name": "viewItem",
            "paid_btn_url": "https://t.me/chitershop_bot"
        }
        async with session.post("https://pay.crypt.bot/api/createInvoice", json=invoice_data, headers=headers) as resp:
            resp_data = await resp.json()
            if resp_data.get("ok"):
                pay_url = resp_data["result"]["pay_url"]
                await message.answer(
                    f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item_names[item]}</b>\n"
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount}</b>\n"
                    f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total_ton} TON</b>\n\n"
                    f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot", url=pay_url)]
                    ])
                )
            else:
                await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            f"<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–ª–∏—á–∏–µ:</b>\n\n"
            f"–ë–æ–º–∂ –∫—É–∫–∏: {stock['bomj']}\n"
            f"–†–∞–Ω–¥–æ–º –∫—É–∫–∏: {stock['random']}\n"
            f"–ñ–∏—Ä –∫—É–∫–∏: {stock['fat']}"
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

async def handle_webhook(request):
    data = await request.json()
    if data.get("update_type") == "invoice_paid":
        payload = data["payload"]
        if payload in user_data:
            item = user_data[payload]["item"]
            amount = user_data[payload]["amount"]
            user_id = user_data[payload]["user_id"]
            stock[item] -= amount  # –ó–º–µ–Ω—à—É—î–º–æ –∑–∞–ø–∞—Å–∏
            for i in range(amount):
                cookie = generate_cookie()
                filename = f"cookie_{user_id}_{i}.txt"
                with open(filename, "w") as f:
                    f.write(cookie)
                await bot.send_document(user_id, FSInputFile(filename))
                os.remove(filename)  # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª –ø—ñ—Å–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
            del user_data[payload]
            await bot.send_message(user_id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {amount} {item_names[item]}.")
    return web.Response()

async def start_webhook_server():
    app = web.Application()
    app.router.add_post('/webhook', handle_webhook)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)  # –ü–æ—Ä—Ç 8080 –¥–ª—è Render
    await site.start()

async def main():
    dp.include_router(router)
    asyncio.create_task(update_stock())
    async with aiohttp.ClientSession() as session:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN}
        async with session.post(
            "https://pay.crypt.bot/api/setWebhook",
            json={"url": WEBHOOK_URL},
            headers=headers
        ) as resp:
            print(await resp.json())
    asyncio.create_task(start_webhook_server())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
