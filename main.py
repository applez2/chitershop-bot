import asyncio
import random
import string
import aiohttp
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, FSInputFile
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram import Router
from aiogram.filters import CommandStart, Command
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import logging
import os

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = '7719533432:AAHhV3qYRgD3rZKKl7jYq54dFhMkN7I0mXE'
CRYPTOBOT_TOKEN = '435663:AArmdXRrs3UeZDzEiXcwZoSQP7clCkXdZTM'
ADMIN_ID = 5001689214

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())
router = Router()

class BuyState(StatesGroup):
    choosing_amount = State()
    choosing_currency = State()

PRICES = {
    "bomj": {"usdt": 0.5, "ton": 0.15977258},
    "random": {"usdt": 1.0, "ton": 0.32017184},
    "fat": {"usdt": 2.5, "ton": 0.79812681}
}

stock = {
    "bomj": 0,
    "random": 0,
    "fat": 0
}

item_names = {
    "bomj": "–ë–æ–º–∂ –∫—É–∫–∏",
    "random": "–†–∞–Ω–¥–æ–º –∫—É–∫–∏",
    "fat": "–ñ–∏—Ä –∫—É–∫–∏"
}

user_data = {}
processed_invoices = set()

async def update_stock():
    while True:
        stock["bomj"] = random.randint(500, 1000)
        stock["random"] = random.randint(600, 1200)
        stock["fat"] = random.randint(100, 200)
        logger.info(f"Stock updated: {stock}")
        await asyncio.sleep(86400)

def generate_cookie():
    prefix = "_|WARNING:-DO-NOT-SHARE-THIS.--Sharing-this-will-allow-someone-to-log-in-as-you-and-to-steal-your-ROBUX-and-items.|_CAEaAhAB."
    data = ''.join(random.choices(string.ascii_letters + string.digits, k=700))
    return prefix + data

def main_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üõí –¢–æ–≤–∞—Ä—ã", callback_data="show_products")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")],
        [InlineKeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
        [InlineKeyboardButton(text="üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instructions")]
    ])
    return kb

def product_menu():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"–ë–æ–º–∂ –∫—É–∫–∏ ({stock['bomj']} —à—Ç) - {PRICES['bomj']['usdt']} USDT / {PRICES['bomj']['ton']} TON", callback_data="buy_bomj")],
        [InlineKeyboardButton(text=f"–†–∞–Ω–¥–æ–º –∫—É–∫–∏ ({stock['random']} —à—Ç) - {PRICES['random']['usdt']} USDT / {PRICES['random']['ton']} TON", callback_data="buy_random")],
        [InlineKeyboardButton(text=f"–ñ–∏—Ä –∫—É–∫–∏ ({stock['fat']} —à—Ç) - {PRICES['fat']['usdt']} USDT / {PRICES['fat']['ton']} TON", callback_data="buy_fat")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return kb

def currency_menu(item):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíµ USDT", callback_data=f"currency_usdt_{item}")],
        [InlineKeyboardButton(text="üíé TON", callback_data=f"currency_ton_{item}")]
    ])
    return kb

async def send_cookie_files(user_id: int, inv_payload: str, item: str, amount: int):
    stock[item] -= amount
    for i in range(amount):
        cookie = generate_cookie()
        file_name = f"cookie_{inv_payload}_{i}.txt"
        with open(file_name, "w") as f:
            f.write(cookie)
        try:
            await bot.send_document(user_id, FSInputFile(file_name))
            logger.info(f"Sent cookie file {file_name} to user {user_id}")
        finally:
            try:
                os.remove(file_name)
                logger.info(f"Deleted cookie file {file_name}")
            except Exception as e:
                logger.error(f"Failed to delete cookie file {file_name}: {str(e)}")
    await bot.send_message(user_id, "–û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –¢–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")

async def check_payments_task():
    retry_count = 0
    max_retries = 3
    while True:
        async with aiohttp.ClientSession() as session:
            headers = {"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN}
            try:
                async with session.get("https://pay.crypt.bot/api/getInvoices", headers=headers, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                    raw_response = await resp.text()
                    logger.info(f"Raw payment check response: {raw_response}")
                    resp_data = await resp.json()
                    logger.info(f"Payment check API response: {resp_data}")
                    if not isinstance(resp_data, dict):
                        logger.error(f"Invalid API response type: expected dict, got {type(resp_data)}")
                        await asyncio.sleep(10)
                        continue
                    if resp_data.get("ok"):
                        result = resp_data.get("result")
                        if isinstance(result, dict):
                            logger.info("Result is a single dictionary, converting to list")
                            result = [result]
                        elif not isinstance(result, (list, dict)):
                            logger.error(f"Invalid result type: expected list or dict, got {type(result)}")
                            await asyncio.sleep(10)
                            continue
                        for invoice in result if isinstance(result, list) else [result]:
                            if not isinstance(invoice, dict):
                                logger.error(f"Invalid invoice type: expected dict, got {type(invoice)}")
                                continue
                            inv_payload = invoice.get("payload")
                            status = invoice.get("status")
                            if not inv_payload or not status:
                                logger.error(f"Missing payload or status in invoice: {invoice}")
                                continue
                            logger.info(f"Checking invoice: payload={inv_payload}, status={status}")
                            if (status == "paid" and 
                                inv_payload not in processed_invoices and 
                                inv_payload in user_data):
                                user_id = user_data[inv_payload]["user_id"]
                                item = user_data[inv_payload]["item"]
                                amount = user_data[inv_payload]["amount"]
                                processed_invoices.add(inv_payload)
                                await send_cookie_files(user_id, inv_payload, item, amount)
                                del user_data[inv_payload]
                                logger.info(f"Processed invoice {inv_payload} for user {user_id}")
                    else:
                        error_message = resp_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                        logger.error(f"Failed to check invoices: {error_message}")
            except Exception as e:
                retry_count += 1
                logger.error(f"Exception during payment check (attempt {retry_count}/{max_retries}): {str(e)}")
                if retry_count < max_retries:
                    await asyncio.sleep(5 * retry_count)
                    continue
                retry_count = 0
            await asyncio.sleep(10)

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ChiterShop</b>! üéâ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

@router.callback_query(lambda c: c.data == "show_products")
async def show_products(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã</b>:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏:",
        reply_markup=product_menu()
    )

@router.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>ChiterShop</b>! üéâ\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=main_menu()
    )

@router.callback_query(lambda c: c.data == "info")
async def show_info(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–≥–∞–∑–∏–Ω–µ</b>\n\n"
        "ChiterShop - –≤–∞—à –Ω–∞–¥—ë–∂–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∫—É–∫–∏! üç™\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –ø–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ü–µ–Ω–∞–º.\n"
        "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ CryptoBot –≤ USDT –∏–ª–∏ TON.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@router.callback_query(lambda c: c.data == "support")
async def show_support(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: @p2pica\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@router.callback_query(lambda c: c.data == "instructions")
async def send_instructions(callback: types.CallbackQuery):
    instructions_url = "https://docs.google.com/document/d/1wKRnzBFxOAVaUqJmz-AIjEE9P3FRgvZsJn7jGVwfzkE/edit?usp=sharing"
    try:
        await callback.message.edit_text(
            "üìñ <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</b>\n\n"
            "–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫—É–∫–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:\n"
            f'<a href="{instructions_url}">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>',
            reply_markup=main_menu()
        )
        logger.info(f"Sent instructions link to user {callback.from_user.id}")
    except Exception as e:
        logger.error(f"Error sending instructions link to user {callback.from_user.id}: {str(e)}")
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @ChiterShopSupport.",
            reply_markup=main_menu()
        )

@router.callback_query(lambda c: c.data and c.data.startswith("buy_"))
async def ask_amount(callback: types.CallbackQuery, state: FSMContext):
    item = callback.data.split('_')[1]
    await state.update_data(item=item)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item_names[item]}</b>.\n"
        f"–¶–µ–Ω–∞: {PRICES[item]['usdt']} USDT / {PRICES[item]['ton']} TON –∑–∞ —à—Ç—É–∫—É.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
        reply_markup=currency_menu(item)
    )
    await state.set_state(BuyState.choosing_currency)

@router.callback_query(lambda c: c.data and c.data.startswith("currency_"))
async def process_currency(callback: types.CallbackQuery, state: FSMContext):
    currency, item = callback.data.split('_')[1:]
    await state.update_data(currency=currency)
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ <b>{item_names[item]}</b>.\n"
        f"–í–∞–ª—é—Ç–∞: <b>{currency.upper()}</b>.\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:"
    )
    await state.set_state(BuyState.choosing_amount)

@router.message(BuyState.choosing_amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = int(message.text)
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ –Ω—É–ª—è.")
    except ValueError as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e) or '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.'}")
        return

    data = await state.get_data()
    item = data['item']
    currency = data['currency']

    if amount > stock[item]:
        await message.answer(f"–û—à–∏–±–∫–∞: –ù–∞ —Å–∫–ª–∞–¥–µ —Ç–æ–ª—å–∫–æ {stock[item]} —à—Ç. {item_names[item]}.")
        return

    total = round(PRICES[item][currency] * amount, 6)
    payload = f"{message.from_user.id}_{item}_{amount}"

    user_data[payload] = {
        "item": item,
        "amount": amount,
        "currency": currency,
        "user_id": message.from_user.id
    }
    logger.info(f"Added to user_data: {payload} -> {user_data[payload]}")

    async with aiohttp.ClientSession() as session:
        headers = {
            "Content-Type": "application/json",
            "Crypto-Pay-API-Token": CRYPTOBOT_TOKEN
        }
        invoice_data = {
            "asset": currency.upper(),
            "amount": total,
            "description": f"–ü–æ–∫—É–ø–∫–∞: {item_names[item]} x{amount}",
            "hidden_message": "–ö—É–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.",
            "payload": payload,
            "paid_btn_name": "viewItem",
            "paid_btn_url": "https://t.me/chitershop_bot"
        }
        try:
            async with session.post("https://pay.crypt.bot/api/createInvoice", json=invoice_data, headers=headers) as resp:
                resp_data = await resp.json()
                logger.info(f"CryptoBot invoice creation response: {resp_data}")
                if resp_data.get("ok"):
                    pay_url = resp_data["result"]["pay_url"]
                    await message.answer(
                        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item_names[item]}</b>\n"
                        f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount}</b>\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total} {currency.upper()}</b>\n\n"
                        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ. –¢–æ–≤–∞—Ä –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                            [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ CryptoBot ({currency.upper()})", url=pay_url)],
                            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="show_products")]
                        ])
                    )
                else:
                    error_message = resp_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"Failed to create invoice: {error_message}")
                    await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞: {error_message}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as e:
            logger.error(f"Exception during invoice creation: {str(e)}")
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await state.clear()

@router.message(Command("admin"))
async def admin_panel(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer(
            f"<b>–¢–µ–∫—É—â–µ–µ –Ω–∞–ª–∏—á–∏–µ:</b>\n\n"
            f"–ë–æ–º–∂ –∫—É–∫–∏: {stock['bomj']}\n"
            f"–†–∞–Ω–¥–æ–º –∫—É–∫–∏: {stock['random']}\n"
            f"–ñ–∏—Ä –∫—É–∫–∏: {stock['fat']}",
            reply_markup=main_menu()
        )
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏.")

@router.message(Command("check"))
async def check_payment(message: types.Message):
    payload = f"{message.from_user.id}_"
    async with aiohttp.ClientSession() as session:
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN}
        try:
            async with session.get("https://pay.crypt.bot/api/getInvoices", headers=headers, timeout=aiohttp.ClientTimeout(total=10)) as resp:
                raw_response = await resp.text()
                logger.info(f"Raw manual check response: {raw_response}")
                resp_data = await resp.json()
                logger.info(f"Manual check payment API response: {resp_data}")
                if not isinstance(resp_data, dict):
                    logger.error(f"Invalid API response type: expected dict, got {type(resp_data)}")
                    await message.answer(
                        "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API.\n"
                        "–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.\n"
                        "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ChiterShopSupport."
                    )
                    return
                if resp_data.get("ok"):
                    result = resp_data.get("result")
                    if isinstance(result, dict):
                        logger.info("Manual check: Result is a single dictionary, converting to list")
                        result = [result]
                    elif not isinstance(result, (list, dict)):
                        logger.error(f"Invalid result type: expected list or dict, got {type(result)}")
                        await message.answer(
                            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.\n"
                            "–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.\n"
                            "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ChiterShopSupport."
                        )
                        return
                    for invoice in result if isinstance(result, list) else [result]:
                        if not isinstance(invoice, dict):
                            logger.error(f"Invalid invoice type: expected dict, got {type(invoice)}")
                            continue
                        inv_payload = invoice.get("payload")
                        status = invoice.get("status")
                        if not inv_payload or not status:
                            logger.error(f"Missing payload or status in invoice: {invoice}")
                            continue
                        logger.info(f"Manual check: Checking invoice: payload={inv_payload}, status={status}")
                        if (status == "paid" and 
                            inv_payload not in processed_invoices and 
                            inv_payload in user_data):
                            user_id = user_data[inv_payload]["user_id"]
                            item = user_data[inv_payload]["item"]
                            amount = user_data[inv_payload]["amount"]
                            processed_invoices.add(inv_payload)
                            await send_cookie_files(user_id, inv_payload, item, amount)
                            del user_data[inv_payload]
                            logger.info(f"Manually processed invoice {inv_payload} for user {user_id}")
                            return
                    await message.answer(
                        "–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á—ë—Ç —á–µ—Ä–µ–∑ CryptoBot.\n"
                        "–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, –Ω–æ –º–æ–≥—É—Ç –∑–∞–Ω—è—Ç—å 2-3 –º–∏–Ω—É—Ç—ã.\n"
                        "–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ChiterShopSupport."
                    )
                else:
                    error_message = resp_data.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"Failed to check invoices: {error_message}")
                    await message.answer(
                        f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: {error_message}.\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ChiterShopSupport."
                    )
        except Exception as e:
            logger.error(f"Exception during manual payment check: {str(e)}")
            await message.answer(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—Ç—ã: –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ API.\n"
                "–ü–ª–∞—Ç–µ–∂–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 2-3 –º–∏–Ω—É—Ç—ã.\n"
                "–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ChiterShopSupport."
            )

async def main():
    dp.include_router(router)
    asyncio.create_task(update_stock())
    asyncio.create_task(check_payments_task())
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
